# TEE PELI TÄHÄN
import pygame
import random
import math

class ComradeRobot:
    def __init__(self) -> None:
        pygame.init()
        self.screen = pygame.display.set_mode((1366, 768))
        self.clock = pygame.time.Clock()
        self.font = pygame.font.SysFont("Arial", 24)
        self.bigfont = pygame.font.SysFont("Arial", 50)
        self.introy = 500
        pygame.display.set_caption("Comrade Robot")
        self.introscreen()
        self.play_game()
    
    def introscreen(self):
        while True:
            for tapahtuma in pygame.event.get():
                if tapahtuma.type == pygame.KEYDOWN:
                    if tapahtuma.key == pygame.K_ESCAPE:
                        exit() 
                    if tapahtuma.key == pygame.K_RETURN:
                        return

                if tapahtuma.type == pygame.QUIT:
                    exit()
            self.screen.fill((0, 0, 0))
            pygame.draw.line(self.screen, (255, 0, 0), (600, 80), (650, 130), 3)
            pygame.draw.line(self.screen, (255, 0, 0), (600, 130), (630, 100), 3)
            pygame.draw.line(self.screen, (255, 0, 0), (650, 100), (630, 100), 3)
            pygame.draw.line(self.screen, (255, 0, 0), (650, 100), (660, 90), 3)
            pygame.draw.line(self.screen, (255, 0, 0), (660, 70), (660, 90), 3)
            pygame.draw.line(self.screen, (255, 0, 0), (590, 90), (610, 70), 14)
            self.head = self.bigfont.render("COMRADE ROBOT", True, (255, 0, 0))
            self.text = """
            The filthy capitalists have taken over our motherland! \n
            You are STALINATOR9000, the last hope of international communism and the liberation of labourers worldwide. \n
            Armed with a trusty Kalashnikov, fight the corrupted PUTINBOTS and collect their money to erect the greatest \n
            Stalin statue the world has ever seen. \n
            But beware of the ghosts of capitalism that are always looking to corrupt the hard working communists with their trickery.\n
            \n
            Good luck comrade!
            """ 
            self.screen.blit(self.head, (100, 100)) 
            self.fsize = self.font.get_linesize()   
            self.render_multi_line(self.text, 100, 200 + self.introy, self.fsize)
            if self.introy > 0:
                self.introy -= 2
            if self.introy <= 0:
                self.screen.blit(self.font.render("Enter = New game (wasd, r and mouse to play)", True, (255, 0, 0)), (100, 700))
                self.screen.blit(self.font.render("Esc = Exit", True, (255, 0, 0)), (700, 700))
            pygame.display.flip()
            self.clock.tick(60)
    
    def render_multi_line(self, text, x, y, fsize):
        self.lines = text.splitlines()
        for i, l in enumerate(self.lines):
            self.screen.blit(self.font.render(l, 0, (255, 0, 0)), (x, y + fsize*i))
    
    def draw_ui(self):
        self.screen.fill((0, 0, 0))
        self.screen.blit(self.font.render(f"Ammo: {self.stalin.gun.ammo}/{self.stalin.gun.clip}", True, (255, 0, 0)), (1230, 730))
        self.screen.blit(self.font.render(f"Capitalist corruption: {self.stalin.haunts}/3", True, (255, 0, 0)), (1000, 730))
        self.screen.blit(self.font.render(f"Glorious statue progress: {self.statue.progress}%", True, (255, 0, 0)), (20, 730))
        if self.stalin.coin:
            self.screen.blit(self.font.render(f"Coin picked up.", True, (255, 0, 0)), (290, 730))
        if self.stalin.gun.heat > 0:
            pygame.draw.line(self.screen, (255, 0, 0), (1100, 730), (1100 + self.stalin.gun.heat, 730), 7)

    
    def play_game(self):
        self.stalin = Stalinator()
        self.putin = Putinbot()
        self.statue = Statue()
        self.door = Door()
        self.ghosts = []
        self.coin = None
        while True:
            self.stalin.read_input()
            self.stalin.move()
            self.draw_ui()
            if self.putin != None:
                self.putin.move()
                if self.putin.hitcheck(self.stalin.middle[0], self.stalin.middle[1]):
                    self.losing()
                self.screen.blit(self.putin.bot, (self.putin.x, self.putin.y))
            if self.coin != None:
                self.screen.blit(self.coin.coin, (self.coin.x, self.coin.y))
                if self.coin.hitcheck(self.stalin.middle[0], self.stalin.middle[1]):
                    self.stalin.coin = True
                    self.coin = None
            self.screen.blit(self.stalin.bot, (self.stalin.x, self.stalin.y))
            self.screen.blit(self.door.door, (self.door.x, self.door.y))
            self.gun_actions()
            self.ghost_actions()
            self.doorcheck()
            pygame.display.flip()
            self.clock.tick(60)
    
    def gun_actions(self):
        if self.stalin.gun.bullets != []:
            for bullet in self.stalin.gun.bullets:
                if bullet.move():
                    self.stalin.gun.bullets.remove(bullet)
                bullet.draw(self.screen)
                if self.putin != None:
                    if self.putin.hitcheck(bullet.ax, bullet.ay):
                        self.stalin.gun.bullets.remove(bullet)
                        self.coin = Coin(self.putin.x, self.putin.y)
                        self.ghosts.append(Ghost(self.putin.x, self.putin.y))
                        self.putin = None
        self.stalin.gun.cool()
        if self.stalin.gun.bullets == [] and self.putin != None and self.stalin.gun.lose():
            self.losing()

    def ghost_actions(self):
        if self.ghosts == []:
            return
        for ghost in self.ghosts:
            ghost.move(self.stalin.x, self.stalin.y)
            self.screen.blit(ghost.ghost, (ghost.x, ghost.y))
            if ghost.hitcheck(self.stalin.middle[0], self.stalin.middle[1]):
                if self.stalin.haunt():
                    self.losing()
                self.ghosts.remove(ghost)
    
    def doorcheck(self):
        if self.door.hitcheck(self.stalin.x, self.stalin.y) and self.stalin.coin:
            if self.statue.build():
                self.winner()
            self.stalin.coin = False
            self.putin = Putinbot()


            
    def losing(self):
        while True:
            for tapahtuma in pygame.event.get():
                if tapahtuma.type == pygame.KEYDOWN:
                    if tapahtuma.key == pygame.K_ESCAPE:
                        exit() 
                    if tapahtuma.key == pygame.K_RETURN:
                        ComradeRobot()

                if tapahtuma.type == pygame.QUIT:
                    exit()
            self.screen.fill((0, 0, 0))
            self.screen.blit(self.bigfont.render("U SUCK LOL!!1 (esc to quit, enter to retry)", True, (255, 0, 0)), (100, 100))
            pygame.display.flip()
            self.clock.tick(60)

    def winner(self):
        while True:
            for tapahtuma in pygame.event.get():
                if tapahtuma.type == pygame.KEYDOWN:
                    if tapahtuma.key == pygame.K_ESCAPE:
                        exit() 
                    if tapahtuma.key == pygame.K_RETURN:
                        ComradeRobot()

                if tapahtuma.type == pygame.QUIT:
                    exit()
            self.screen.fill((0, 0, 0))
            self.screen.blit(self.bigfont.render("U ARE THE BESTEST!!1", True, (255, 0, 0)), (100, 100))
            self.screen.blit(self.bigfont.render("(esc to quit, enter to play again)", True, (255, 0, 0)), (100, 200))
            pygame.display.flip()
            self.clock.tick(60)

class Stalinator:
    def __init__(self) -> None:
        self.bot = pygame.image.load("robo.png")
        self.x = 0
        self.y = 0
        self.gun = Kalashnikov()
        self.width = self.bot.get_width()
        self.height = self.bot.get_height()
        self.middle = (self.x + (self.width // 2), self.y + (self.height // 2))
        self.right = False
        self.left = False
        self.up = False
        self.down = False
        self.haunts = 0
        self.coin = False
    
    def read_input(self):
            for tapahtuma in pygame.event.get():
                if tapahtuma.type == pygame.KEYDOWN:
                    if tapahtuma.key == pygame.K_a:
                        self.left = True
                    if tapahtuma.key == pygame.K_d:
                        self.right = True
                    if tapahtuma.key == pygame.K_w:
                        self.up = True
                    if tapahtuma.key == pygame.K_s:
                        self.down = True
                    if tapahtuma.key == pygame.K_r:
                        self.gun.reload()
                    if tapahtuma.key == pygame.K_ESCAPE:
                        exit() 
                if tapahtuma.type == pygame.MOUSEBUTTONDOWN:
                    self.gun.shoot(self.middle[0], self.middle[1], tapahtuma.pos[0], tapahtuma.pos[1])

                if tapahtuma.type == pygame.KEYUP:
                    if tapahtuma.key == pygame.K_a:
                        self.left = False
                    if tapahtuma.key == pygame.K_d:
                        self.right = False
                    if tapahtuma.key == pygame.K_w:
                        self.up = False
                    if tapahtuma.key == pygame.K_s:
                        self.down = False


                if tapahtuma.type == pygame.QUIT:
                    exit() 
                
    def move(self):
        if self.right and self.x < 1366 - self.width:
            self.x += 2
        if self.left and self.x > 1:
            self.x -= 2
        if self.up and self.y > 1:
            self.y -= 2
        if self.down and self.y < 768 - self.height:
            self.y += 2   
        self.middle = (self.x + (self.width // 2), self.y + (self.height // 2))
    
    def haunt(self):
        if self.haunts < 2:
            self.haunts += 1
            return False
        return True

        
  

class Kalashnikov:
    def __init__(self) -> None:
        self.ammo = 10
        self.clip = 20
        self.bullets = []
        self.heat = 0

    def shoot(self, ax, ay, bx, by):
        if self.heat > 0 or self.ammo == 0:
            return
        self.bullets.append(Bullet(ax, ay, bx, by))
        self.ammo -= 1
        self.heat = 100  

    def cool(self):
        if self.heat > 0:
            self.heat -= 1
    
    def reload(self):
        if self.heat > 0:
            return
        if self.clip < 10 - self.ammo:
            self.ammo += self.clip
            self.clip = 0
        else:
            self.clip -= 10 - self.ammo
            self.ammo = 10
    
    def lose(self):
        if self.bullets == 0 and self.ammo == 0:
            return True
        return False

class Bullet:
    def __init__(self, ax, ay, bx, by) -> None:
        self.ax = ax
        self.ay = ay
        self.distance_x = bx - ax
        self.distance_y = by - ay
        self.distance = math.sqrt(self.distance_x**2 + self.distance_y**2)
        self.speed_x = 5 * (self.distance_x / self.distance)
        self.speed_y = 5 * (self.distance_y / self.distance)
    
    def draw(self, screen):
        pygame.draw.circle(screen, (255, 0, 0), (int(self.ax), int(self.ay)), 4)
    
    def move(self):
        self.ax += self.speed_x
        self.ay += self.speed_y
        if self.ax < 0 or self.ax > 1366 or self.ay < 0 or self.ay > 768:
            return True
        return False
    



class Putinbot:
    def __init__(self) -> None:
        self.bot = pygame.image.load("robo.png")
        self.width = self.bot.get_width()
        self.height = self.bot.get_height()
        self.x = random.randint(0, 1366 - self.width)
        self.y = random.randint(0, 768 - self.height)
        self.tx = random.randint(0, 1366 - self.width)
        self.ty = random.randint(0, 768 - self.height)
    
    def target(self):
        self.tx = random.randint(0, 1366 - self.width)
        self.ty = random.randint(0, 768 - self.height)
        
    def move(self):
        if self.x > self.tx - 3 and self.x < self.tx + 3 and self.y > self.ty - 3 and self.y < self.ty + 3:
            self.target()
        if self.x < self.tx:
            self.x += 2
        elif self.x > self.tx:
            self.x -= 2
        if self.y < self.ty:
            self.y += 2
        elif self.y > self.ty:
            self.y -= 2
    
    def hitcheck(self, x, y):
        if self.x + self.width >= x and self.x <= x and self.y + self.height >= y and self.y <= y:
            return True
        return False



class Coin:
    def __init__(self, x, y) -> None:
        self.coin = pygame.image.load("kolikko.png")
        self.x = x
        self.y = y
        self.width = self.coin.get_width()
        self.height = self.coin.get_height()

    def hitcheck(self, x, y):
        if self.x + self.width >= x and self.x <= x and self.y + self.height >= y and self.y <= y:
            return True
        return False


class Ghost:
    def __init__(self, x, y) -> None:
        self.ghost = pygame.image.load("hirvio.png")
        self.x = x
        self.y = y
        self.width = self.ghost.get_width()
        self.height = self.ghost.get_height()
        self.tx = random.randint(0, 1366 - self.width)
        self.ty = random.randint(0, 768 - self.height)        
        self.independent = False
    
    def move(self, x, y):
        if self.independent == False:
            if random.randint(0, 800) == 1:
                self.target()
                self.independent = True
            if self.x < x:
                self.x += 1
            elif self.x > x:
                self.x -= 1
            if self.y < y:
                self.y += 1
            elif self.y > y:
                self.y -= 1
        if self.independent:
            if self.x > self.tx - 3 and self.x < self.tx + 3 and self.y > self.ty - 3 and self.y < self.ty + 3:
                self.independent = False
            if self.x < self.tx:
                self.x += 1
            elif self.x > self.tx:
                self.x -= 1
            if self.y < self.ty:
                self.y += 1
            elif self.y > self.ty:
                self.y -= 1            

    def target(self):
        self.tx = random.randint(0, 1366 - self.width)
        self.ty = random.randint(0, 768 - self.height)
    
    def hitcheck(self, x, y):
        if self.x + self.width >= x and self.x <= x and self.y + self.height >= y and self.y <= y:
            return True
        return False

        

class Statue:
    def __init__(self) -> None:
        self.progress = 0
    
    def build(self):
        if self.progress < 100:
            self.progress += 10
        if self.progress >= 100:
            return True
        return False

class Door:
    def __init__(self) -> None:
        self.door = pygame.image.load("ovi.png")
        self.x = 0
        self.y = 0
        self.width = self.door.get_width()
        self.height = self.door.get_height()
    
    def hitcheck(self, x, y):
        if self.width >= x and self.height >= y:
            return True
        return False        

ComradeRobot()
